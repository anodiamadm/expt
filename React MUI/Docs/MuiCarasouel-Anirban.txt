import { Paper,CardMedia,Typography } from '@mui/material';
import Carousel from "react-material-ui-carousel";

const MuiCarousel = () => {
  const items = ["https://www.youtube.com/embed/muuK4SpRR5M",
                 "https://www.youtube.com/embed/AVn-Yjr7kDc"];

  const handleChange=()=>{
    const video = document.querySelector("#iframe");
    
    console.log('changed',video?.id);
  }

  return (
    <Paper sx={{ width:'400px', height:'300px'}}>
      <Carousel navButtonsAlwaysVisible height={300} onChange={handleChange} >
        {items.map((i) => {
          return (
            <Typography align="center" key={i}>
              <CardMedia id={i} component="iframe" src={i} height={300} />
            </Typography>
          );
        })}
      </Carousel>
    </Paper>
  );
}

export default MuiCarousel;

  // State to programmatically set active child
  // const [activeChild, setActiveChild] = useState(0);
  //const onChangeCarousel = (videoIndex)=>{alert(videoIndex)};

  // Basically items = [1, 2, 3, 4]



  // The Keypress Event Handler
  // const changeChild = useCallback(
  //   (e:any) => {
  //     if (e.key === "ArrowLeft") {
  //       // If supposed previous child is < 0 set it to last child
  //       setActiveChild((a) => (a - 1 < 0 ? items.length - 1 : a - 1));        
  //     } else if (e.key === "ArrowRight") {
  //       // If supposed next child is > length -1 set it to first child
  //       setActiveChild((a) => (a + 1 > items.length - 1 ? 0 : a + 1));
  //     }
  //     console.log('Active Child: ', activeChild);
  //   },
  //   [items, activeChild]
  // );

  // Set and cleanup the event listener
  // useEffect(() => {
  //   document.addEventListener("keydown", changeChild);

  //   return function cleanup() {
  //     document.removeEventListener("keydown", changeChild);
  //   };
  // });

        // index={activeChild} // <-- This controls the activeChild
        // autoPlay={true} // <-- You probaly want to disable this for our purposes


                // next={onChangeCarousel(activeChild)}
